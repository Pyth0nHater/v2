const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const fs = require("fs");
const path = require("path");

const MESSAGE_HISTORY_FILE = path.join(__dirname, "messageHistory.json");
const MAX_HISTORY_SIZE = 20;

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
let messageHistory = [];
try {
  if (fs.existsSync(MESSAGE_HISTORY_FILE)) {
    const data = fs.readFileSync(MESSAGE_HISTORY_FILE, "utf-8");
    messageHistory = JSON.parse(data);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
    if (!Array.isArray(messageHistory)) {
      messageHistory = [];
    }
  }
} catch (err) {
  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", err);
}

const API_ID = 25171031;
const API_HASH = "10f7696a65a7217fad43302ea6ba1695";
const session = new StringSession(
  "1AgAOMTQ5LjE1NC4xNjcuNDEBu78qPLXHr8yaYljJt/Jn1PwprinT4b9+tiuoEGx7bkzsIIrVwsN9gPd30kv/tPx00oBBEKjPr6Ugj54FeQvO6CITHwkTjShMGMYVqEQf9oGJJTQvktHJehCFHjCiRq3YPlABhac3ChqT0B2qxANk3P4brmR1UUs3bGEcqvSqbKTIOQCWrZApA5RyAuwiQG5HKjJY7M71aeqRgbGEpP0zvdyyDe2fTd/aazvjSrbNjDtK/nh0Zd3Xbonk1ekpxOJqTYfTTw08ZsIUOlWFCQNsVtHrtYkS9JMK5e5CGRZTJ2SBOPVk7bXzt0BoPBjRcNVYD/HYxrguGEdD0v36kLuMdhg="
);
const client = new TelegramClient(session, API_ID, API_HASH, {
  connectionRetries: 5,
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤
const SOURCE_CHANNELS = [
  "@hr_affiliate",
  "@affy_hr",
  "@works_cpa",
  "@testpost1233",
];
const TARGET_CHANNEL = "@arbitrage_vacancys";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
function normalizeText(text) {
  return text
    .replace(/\s+/g, " ") // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
    .trim() // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    .toLowerCase(); // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
}

function saveMessageToHistory(text) {
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
  const normalizedText = normalizeText(text);

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
  messageHistory.unshift(normalizedText);

  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞—é—Ç—Å—è, —Å—Ç–∞—Ä—ã–µ —É–¥–∞–ª—è—é—Ç—Å—è)
  const uniqueHistory = [];
  const seen = new Set();

  for (const item of messageHistory) {
    if (!seen.has(item)) {
      seen.add(item);
      uniqueHistory.push(item);
    }
  }

  // –û–±—Ä–µ–∑–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
  messageHistory = uniqueHistory.slice(0, MAX_HISTORY_SIZE);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
  try {
    fs.writeFileSync(
      MESSAGE_HISTORY_FILE,
      JSON.stringify(messageHistory, null, 2)
    );
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", err);
  }
}

function isMessageDuplicate(text) {
  const normalizedText = normalizeText(text);
  return messageHistory.includes(normalizedText);
}

(async () => {
  await client.connect();
  console.log("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram");

  client.addEventHandler(async (event) => {
    try {
      const message = event.message;
      if (!message) return;

      // –ü–æ–ª—É—á–∞–µ–º username –∫–∞–Ω–∞–ª–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞
      const sourceChat = await client.getEntity(message.peerId);
      const sourceUsername = sourceChat.username;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
      if (!sourceUsername || !SOURCE_CHANNELS.includes(`@${sourceUsername}`)) {
        return;
      }

      console.log(`üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ @${sourceUsername}`);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageText = message.message || "";

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞)
      if (!messageText.trim()) {
        console.log("‚è≠ –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
      if (isMessageDuplicate(messageText)) {
        console.log("‚è≠ –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
        return;
      }

      // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞
      await client.forwardMessages(TARGET_CHANNEL, {
        messages: [message.id],
        fromPeer: message.peerId,
        dropAuthor: true, // –°–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∞
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
      saveMessageToHistory(messageText);

      console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ (–∞–≤—Ç–æ—Ä —Å–∫—Ä—ã—Ç)!");
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ:", err);
    }
  });

  console.log(`üëÇ –ë–æ—Ç —Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª—ã: ${SOURCE_CHANNELS.join(", ")}`);
  console.log(`üéØ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: ${TARGET_CHANNEL}`);
})();
