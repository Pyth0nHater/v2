const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const fs = require("fs");
const path = require("path");

const MESSAGE_HISTORY_FILE = path.join(__dirname, "messageHistory.json");
const MAX_HISTORY_SIZE = 50; // –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
let messageHistory = [];
try {
  if (fs.existsSync(MESSAGE_HISTORY_FILE)) {
    const data = fs.readFileSync(MESSAGE_HISTORY_FILE, "utf-8");
    messageHistory = JSON.parse(data);
  }
} catch (err) {
  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", err);
}

const API_ID = 25171031;
const API_HASH = "10f7696a65a7217fad43302ea6ba1695";
const session = new StringSession(
  "1AgAOMTQ5LjE1NC4xNjcuNDEBu78qPLXHr8yaYljJt/Jn1PwprinT4b9+tiuoEGx7bkzsIIrVwsN9gPd30kv/tPx00oBBEKjPr6Ugj54FeQvO6CITHwkTjShMGMYVqEQf9oGJJTQvktHJehCFHjCiRq3YPlABhac3ChqT0B2qxANk3P4brmR1UUs3bGEcqvSqbKTIOQCWrZApA5RyAuwiQG5HKjJY7M71aeqRgbGEpP0zvdyyDe2fTd/aazvjSrbNjDtK/nh0Zd3Xbonk1ekpxOJqTYfTTw08ZsIUOlWFCQNsVtHrtYkS9JMK5e5CGRZTJ2SBOPVk7bXzt0BoPBjRcNVYD/HYxrguGEdD0v36kLuMdhg="
);
const client = new TelegramClient(session, API_ID, API_HASH, {
  connectionRetries: 5,
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤
const SOURCE_CHANNELS = [
  "@hr_affiliate",
  "@affy_hr",
  "@works_cpa",
  "@testpost1233",
];
const TARGET_CHANNEL = "@arbitrage_vacancys";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ (—É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤, –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
function normalizeText(text) {
  return text
    .replace(/\s+/g, " ") // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
    .trim() // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    .toLowerCase(); // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
}

function getMessageKey(message) {
  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
  let text = message.text || "";

  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞, –Ω–æ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ–¥–∏–∞
  if (!text && message.media) {
    return `media:${message.media.classType}-${
      message.media.id?.toString() || "0"
    }`;
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const normalizedText = normalizeText(text);

  // –°–æ–∑–¥–∞–µ–º —Ö–µ—à —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é)
  let hash = 0;
  for (let i = 0; i < normalizedText.length; i++) {
    const char = normalizedText.charCodeAt(i);
    hash = (hash << 5) - hash + char;
    hash |= 0; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
  }

  return `text:${hash}`;
}

function saveMessageToHistory(messageKey) {
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
  messageHistory.unshift(messageKey);

  // –û–±—Ä–µ–∑–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
  if (messageHistory.length > MAX_HISTORY_SIZE) {
    messageHistory = messageHistory.slice(0, MAX_HISTORY_SIZE);
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
  try {
    fs.writeFileSync(
      MESSAGE_HISTORY_FILE,
      JSON.stringify(messageHistory, null, 2)
    );
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", err);
  }
}

(async () => {
  await client.connect();
  console.log("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram");

  client.addEventHandler(async (event) => {
    try {
      const message = event.message;
      if (!message) return;

      // –ü–æ–ª—É—á–∞–µ–º username –∫–∞–Ω–∞–ª–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞
      const sourceChat = await client.getEntity(message.peerId);
      const sourceUsername = sourceChat.username;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
      if (!sourceUsername || !SOURCE_CHANNELS.includes(`@${sourceUsername}`)) {
        return;
      }

      console.log(`üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ @${sourceUsername}`);

      // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageKey = getMessageKey(message);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
      if (messageHistory.includes(messageKey)) {
        console.log("‚è≠ –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
        return;
      }

      // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞
      await client.forwardMessages(TARGET_CHANNEL, {
        messages: [message.id],
        fromPeer: message.peerId,
        dropAuthor: true, // –°–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∞
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
      saveMessageToHistory(messageKey);

      console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ (–∞–≤—Ç–æ—Ä —Å–∫—Ä—ã—Ç)!");
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ:", err);
    }
  });

  console.log(`üëÇ –ë–æ—Ç —Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª—ã: ${SOURCE_CHANNELS.join(", ")}`);
  console.log(`üéØ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: ${TARGET_CHANNEL}`);
})();
