const { TelegramClient, Api } = require("telegram");
const { StringSession } = require("telegram/sessions");
const TelegramBot = require("node-telegram-bot-api");

const sleep = (milliseconds) => {
  return new Promise((resolve) => setTimeout(resolve, milliseconds));
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram Client
const API_ID = 25171031;
const API_HASH = "10f7696a65a7217fad43302ea6ba1695";
const session = new StringSession(
  "1AgAOMTQ5LjE1NC4xNjcuNDEBu78qPLXHr8yaYljJt/Jn1PwprinT4b9+tiuoEGx7bkzsIIrVwsN9gPd30kv/tPx00oBBEKjPr6Ugj54FeQvO6CITHwkTjShMGMYVqEQf9oGJJTQvktHJehCFHjCiRq3YPlABhac3ChqT0B2qxANk3P4brmR1UUs3bGEcqvSqbKTIOQCWrZApA5RyAuwiQG5HKjJY7M71aeqRgbGEpP0zvdyyDe2fTd/aazvjSrbNjDtK/nh0Zd3Xbonk1ekpxOJqTYfTTw08ZsIUOlWFCQNsVtHrtYkS9JMK5e5CGRZTJ2SBOPVk7bXzt0BoPBjRcNVYD/HYxrguGEdD0v36kLuMdhg="
);
const client = new TelegramClient(session, API_ID, API_HASH, {
  connectionRetries: 5,
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram Bot
const BOT_TOKEN = "8033041005:AAHLY32ezWnDo8oEXCE0KP0nIniuTn_hfL8"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
const batchSize = 6;
const waitTime = 900;
const sourceChatUsername = "@premiumspamer";
const restartDelay = 5000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (5 —Å–µ–∫—É–Ω–¥)

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
let isSending = false;
let stopSending = false;
let adminChatId = null;
let autoRestartEnabled = false; // –§–ª–∞–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
const menuKeyboard = {
  reply_markup: {
    keyboard: [
      ["üöÄ –°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"],
      ["üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"],
      ["üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –í–ö–õ", "‚èπ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –í–´–ö–õ"],
    ],
    resize_keyboard: true,
    one_time_keyboard: false,
  },
};

async function getAllFolders() {
  try {
    console.log("–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤...");
    const result = await client.invoke(new Api.messages.GetDialogFilters());
    console.log(result.filters[2].includePeers);
    return result.filters[2].includePeers;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤:", error);
    return [];
  }
}

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–∞—Ö
async function printChatsInfo() {
  try {
    await client.connect();
    const chats = await getAllFolders();

    if (!chats || chats.length === 0) {
      console.log("–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è");
      return;
    }

    console.log("–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:");
    for (let i = 0; i < chats.length; i++) {
      try {
        const targetEntity = await client.getInputEntity(chats[i]);
        // console.log(`–ß–∞—Ç ${i + 1}:`, targetEntity);

        // –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
        const fullEntity = await client.getEntity(chats[i]);
        // console.log(`–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞ ${i + 1}:`, fullEntity);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        let chatName = "";
        if (fullEntity.className === "Channel") {
          chatName = fullEntity.title;
        } else if (fullEntity.className === "User") {
          chatName = `${fullEntity.firstName || ""} ${
            fullEntity.lastName || ""
          }`.trim();
        } else if (fullEntity.className === "Chat") {
          chatName = fullEntity.title;
        }

        console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ ${i + 1}:`, chatName);
      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ ${i + 1}:`,
          error
        );
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:", error);
  } finally {
    await client.disconnect();
  }
}

// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–∞—Ö
// printChatsInfo();

async function getLastMessageFromChat(username) {
  try {
    const entity = await client.getEntity(username);
    const messages = await client.getMessages(entity, { limit: 1 });
    return messages[0];
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ ${username}:`, error);
    return null;
  }
}

async function forwardMessageToChats() {
  try {
    if (!adminChatId) {
      console.log("Admin chat ID not set");
      return;
    }

    await client.connect();

    // –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    const chats = await getAllFolders();
    if (!chats || chats.length === 0) {
      console.log("–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏");
      await bot.sendMessage(
        adminChatId,
        "–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
        menuKeyboard
      );
      isSending = false;
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞
    const sourceChat = await client.getEntity(sourceChatUsername);
    const lastMessage = await getLastMessageFromChat(sourceChatUsername);

    if (!lastMessage) {
      console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞");
      await bot.sendMessage(
        adminChatId,
        "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞",
        menuKeyboard
      );
      isSending = false;
      return;
    }

    console.log(`–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ ${sourceChatUsername}...`);
    await bot.sendMessage(
      adminChatId,
      `–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ ${sourceChatUsername}...`,
      menuKeyboard
    );

    let successCount = 0;
    stopSending = false;

    for (let i = 0; i < chats.length; i += batchSize) {
      if (stopSending) {
        console.log("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");
        await bot.sendMessage(
          adminChatId,
          "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
          menuKeyboard
        );
        break;
      }

      const batch = chats.slice(i, i + batchSize);
      const promises = [];

      for (const chat of batch) {
        promises.push(
          (async () => {
            try {
              const targetEntity = await client.getInputEntity(chat);
              await client.forwardMessages(targetEntity, {
                messages: [lastMessage.id],
                fromPeer: sourceChat,
                dropAuthor: true,
              });
              console.log(
                `–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —á–∞—Ç ${chat.className}-${
                  chat.userId || chat.channelId || chat.chatId
                }`
              );
              successCount++;
            } catch (error) {
              console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤ ${chat}:`, error);
            }
          })()
        );
      }

      await Promise.all(promises);

      if (i + batchSize < chats.length && !stopSending) {
        console.log(
          `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${i + batchSize} –∏–∑ ${
            chats.length
          }. –ñ–¥–µ–º ${waitTime} —Å–µ–∫—É–Ω–¥...`
        );
        await bot.sendMessage(
          adminChatId,
          `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${i + batchSize} –∏–∑ ${
            chats.length
          }. –ñ–¥–µ–º ${waitTime} —Å–µ–∫—É–Ω–¥...`,
          menuKeyboard
        );
        await sleep(waitTime * 1000);
      }
    }

    if (!stopSending) {
      console.log("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
      await bot.sendMessage(
        adminChatId,
        `–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount} —Å–æ–æ–±—â–µ–Ω–∏–π`,
        menuKeyboard
      );

      // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
      if (autoRestartEnabled && !stopSending) {
        console.log(`–ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ ${restartDelay / 1000} —Å–µ–∫—É–Ω–¥...`);
        await bot.sendMessage(
          adminChatId,
          `–ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ ${restartDelay / 1000} —Å–µ–∫—É–Ω–¥...`,
          menuKeyboard
        );
        await sleep(restartDelay);
        forwardMessageToChats();
      }
    }
    isSending = false;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ:", error);
    if (adminChatId) {
      await bot.sendMessage(
        adminChatId,
        `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`,
        menuKeyboard
      );
    }
    isSending = false;
  } finally {
    await client.disconnect();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.onText(/\/start/, (msg) => {
  adminChatId = msg.chat.id;
  bot.sendMessage(
    adminChatId,
    "–ë–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
    menuKeyboard
  );
});

bot.on("message", (msg) => {
  const text = msg.text;
  const chatId = msg.chat.id;
  adminChatId = chatId;

  if (text === "üöÄ –°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏") {
    if (isSending) {
      bot.sendMessage(chatId, "–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞", menuKeyboard);
    } else {
      isSending = true;
      stopSending = false;
      bot.sendMessage(chatId, "–ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...", menuKeyboard);
      forwardMessageToChats();
    }
  } else if (text === "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É") {
    if (isSending) {
      stopSending = true;
      bot.sendMessage(
        chatId,
        "–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∏–Ω—è—Ç–∞",
        menuKeyboard
      );
    } else {
      bot.sendMessage(chatId, "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", menuKeyboard);
    }
  } else if (text === "üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –í–ö–õ") {
    autoRestartEnabled = true;
    bot.sendMessage(chatId, "–ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω", menuKeyboard);
    if (!isSending) {
      isSending = true;
      stopSending = false;
      bot.sendMessage(
        chatId,
        "–ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...",
        menuKeyboard
      );
      forwardMessageToChats();
    }
  } else if (text === "‚èπ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –í–´–ö–õ") {
    autoRestartEnabled = false;
    bot.sendMessage(chatId, "–ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—ã–∫–ª—é—á–µ–Ω", menuKeyboard);
  }
});

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥...");
